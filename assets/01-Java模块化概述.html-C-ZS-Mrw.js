import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-C-rEyj6w.js";const e={};function t(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="java模块化是什么" tabindex="-1"><a class="header-anchor" href="#java模块化是什么"><span>Java模块化是什么？</span></a></h2><p>Java模块化（Java Platform Module System，JPMS）是Java 9引入的一个重要特性，也被称为Project Jigsaw。它为Java平台提供了一个全新的模块系统，允许开发者将应用程序和JDK本身组织成一组相互协作的模块。</p><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><p>**模块（Module）**是一个命名的、自描述的代码和数据集合。每个模块都有：</p><ul><li>唯一的名称</li><li>明确声明的依赖关系</li><li>精确控制的API导出</li><li>服务的提供和消费声明</li></ul><p>**模块描述符（module-info.java）**是每个模块的核心，它定义了：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">.example.myapp {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    requires</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> java.base;          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 依赖声明</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    requires</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> java.logging;       </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    exports</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.api;     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 导出包</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    provides</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.spi.Service </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.impl.ServiceImpl;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 服务提供</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="为什么需要模块化" tabindex="-1"><a class="header-anchor" href="#为什么需要模块化"><span>为什么需要模块化？</span></a></h2><h3 id="_1-解决jar-hell问题" tabindex="-1"><a class="header-anchor" href="#_1-解决jar-hell问题"><span>1. 解决JAR Hell问题</span></a></h3><p>传统的Java应用面临着&quot;JAR地狱&quot;问题：</p><ul><li><strong>类路径污染</strong>：所有JAR包都在同一个类路径上，容易发生类冲突</li><li><strong>版本冲突</strong>：同一个库的不同版本可能导致运行时错误</li><li><strong>依赖不明确</strong>：无法清晰地知道应用真正依赖哪些库</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 传统方式：隐式依赖，容易出错</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">java </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">cp </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;lib/*:app.jar&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 模块化方式：明确的依赖声明</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">java </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">path mods </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">.example.app/com.example.Main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-提升安全性和封装性" tabindex="-1"><a class="header-anchor" href="#_2-提升安全性和封装性"><span>2. 提升安全性和封装性</span></a></h3><p>模块化提供了更强的封装机制：</p><ul><li><strong>强封装</strong>：只有明确导出的包才能被外部访问</li><li><strong>反射限制</strong>：默认情况下，反射无法访问非导出的包</li><li><strong>减少攻击面</strong>：隐藏内部实现细节</li></ul><h3 id="_3-改善性能和启动时间" tabindex="-1"><a class="header-anchor" href="#_3-改善性能和启动时间"><span>3. 改善性能和启动时间</span></a></h3><ul><li><strong>更小的运行时</strong>：只加载需要的模块</li><li><strong>提前优化</strong>：编译时就能确定模块依赖关系</li><li><strong>减少内存占用</strong>：避免加载不必要的代码</li></ul><h3 id="_4-更好的可维护性" tabindex="-1"><a class="header-anchor" href="#_4-更好的可维护性"><span>4. 更好的可维护性</span></a></h3><ul><li><strong>清晰的架构</strong>：模块边界明确，职责分离</li><li><strong>依赖管理</strong>：编译时检查依赖关系</li><li><strong>版本控制</strong>：每个模块可以独立版本管理</li></ul><h2 id="模块化基本内容" tabindex="-1"><a class="header-anchor" href="#模块化基本内容"><span>模块化基本内容</span></a></h2><h3 id="_1-模块声明" tabindex="-1"><a class="header-anchor" href="#_1-模块声明"><span>1. 模块声明</span></a></h3><p>每个模块都需要一个<code>module-info.java</code>文件：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">.example.banking {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 依赖其他模块</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    requires</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> java.base;           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 隐式依赖，可省略</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    requires</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> java.logging;        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 显式依赖</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    requires</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transitive</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> java.sql; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 传递性依赖</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 导出包给其他模块使用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    exports</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.banking.api;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    exports</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.banking.model </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">to</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        com.example.web, com.example.mobile;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 限定导出</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 服务相关</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uses</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.banking.spi.PaymentProcessor;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    provides</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.banking.spi.PaymentProcessor </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.banking.impl.CreditCardProcessor;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 反射访问</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    opens</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.banking.entity </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">to</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        com.fasterxml.jackson.databind;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-模块类型" tabindex="-1"><a class="header-anchor" href="#_2-模块类型"><span>2. 模块类型</span></a></h3><h4 id="命名模块-named-module" tabindex="-1"><a class="header-anchor" href="#命名模块-named-module"><span>命名模块（Named Module）</span></a></h4><ul><li>有明确的<code>module-info.java</code>声明</li><li>强封装，只能访问导出的包</li></ul><h4 id="自动模块-automatic-module" tabindex="-1"><a class="header-anchor" href="#自动模块-automatic-module"><span>自动模块（Automatic Module）</span></a></h4><ul><li>传统JAR包放在模块路径上自动成为模块</li><li>模块名从JAR文件名推导</li><li>导出所有包，可以访问类路径上的所有代码</li></ul><h4 id="未命名模块-unnamed-module" tabindex="-1"><a class="header-anchor" href="#未命名模块-unnamed-module"><span>未命名模块（Unnamed Module）</span></a></h4><ul><li>类路径上的代码</li><li>可以访问所有导出的包和其他类路径代码</li></ul><h3 id="_3-关键指令详解" tabindex="-1"><a class="header-anchor" href="#_3-关键指令详解"><span>3. 关键指令详解</span></a></h3><table><thead><tr><th>指令</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>requires</code></td><td>声明依赖</td><td><code>requires java.logging;</code></td></tr><tr><td><code>requires transitive</code></td><td>传递性依赖</td><td><code>requires transitive java.sql;</code></td></tr><tr><td><code>exports</code></td><td>导出包</td><td><code>exports com.example.api;</code></td></tr><tr><td><code>exports...to</code></td><td>限定导出</td><td><code>exports com.example.internal to com.example.test;</code></td></tr><tr><td><code>uses</code></td><td>使用服务</td><td><code>uses com.example.spi.Service;</code></td></tr><tr><td><code>provides...with</code></td><td>提供服务</td><td><code>provides Service with ServiceImpl;</code></td></tr><tr><td><code>opens</code></td><td>开放反射访问</td><td><code>opens com.example.entity;</code></td></tr></tbody></table><h3 id="_4-模块路径-vs-类路径" tabindex="-1"><a class="header-anchor" href="#_4-模块路径-vs-类路径"><span>4. 模块路径 vs 类路径</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 传统类路径方式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;lib/gson.jar:lib/commons-lang.jar:app.jar&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> com.example.Main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 模块路径方式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --module-path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mods</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --module</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> com.example.app/com.example.Main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 混合方式（兼容性）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --module-path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mods</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --class-path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> legacy-libs/</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --module</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> com.example.app/com.example.Main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-实践建议" tabindex="-1"><a class="header-anchor" href="#_5-实践建议"><span>5. 实践建议</span></a></h3><h4 id="模块设计原则" tabindex="-1"><a class="header-anchor" href="#模块设计原则"><span>模块设计原则</span></a></h4><ol><li><strong>单一职责</strong>：每个模块应该有明确的职责</li><li><strong>最小导出</strong>：只导出必要的API包</li><li><strong>稳定依赖</strong>：依赖稳定的模块和API</li><li><strong>避免循环依赖</strong>：模块间不能存在循环依赖</li></ol><h4 id="渐进式迁移策略" tabindex="-1"><a class="header-anchor" href="#渐进式迁移策略"><span>渐进式迁移策略</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第一步：创建模块描述符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">.example.app {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    requires</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> java.base;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 暂时不导出任何包，先确保编译通过</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二步：逐步添加依赖和导出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">.example.app {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    requires</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> java.logging;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    requires</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.common;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    exports</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> com.example.app.api;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>Java模块化是Java平台的一个重要进化，它解决了长期存在的JAR Hell问题，提供了更强的封装性和更好的性能。虽然学习曲线相对陡峭，但对于大型应用和库的开发来说，模块化带来的好处是显而易见的。</p>`,41)]))}const r=i(e,[["render",t]]),d=JSON.parse('{"path":"/posts/java-core/jdk9/modular/01-Java%E6%A8%A1%E5%9D%97%E5%8C%96%E6%A6%82%E8%BF%B0.html","title":"Java模块化概述","lang":"en-US","frontmatter":{"title":"Java模块化概述","category":["Java"],"tag":["JDK","模块化"],"order":1,"description":"Java模块化是什么？ Java模块化（Java Platform Module System，JPMS）是Java 9引入的一个重要特性，也被称为Project Jigsaw。它为Java平台提供了一个全新的模块系统，允许开发者将应用程序和JDK本身组织成一组相互协作的模块。 核心概念 **模块（Module）**是一个命名的、自描述的代码和数据集合...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java模块化概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-27T04:39:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LiLiuMing\\",\\"url\\":\\"https://liliuming-truism.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://liliuming-truism.github.io/posts/java-core/jdk9/modular/01-Java%E6%A8%A1%E5%9D%97%E5%8C%96%E6%A6%82%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"一个程序员的自我修养"}],["meta",{"property":"og:title","content":"Java模块化概述"}],["meta",{"property":"og:description","content":"Java模块化是什么？ Java模块化（Java Platform Module System，JPMS）是Java 9引入的一个重要特性，也被称为Project Jigsaw。它为Java平台提供了一个全新的模块系统，允许开发者将应用程序和JDK本身组织成一组相互协作的模块。 核心概念 **模块（Module）**是一个命名的、自描述的代码和数据集合..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-09-27T04:39:25.000Z"}],["meta",{"property":"article:tag","content":"模块化"}],["meta",{"property":"article:tag","content":"JDK"}],["meta",{"property":"article:modified_time","content":"2025-09-27T04:39:25.000Z"}]]},"git":{"createdTime":1758947965000,"updatedTime":1758947965000,"contributors":[{"name":"liuming.li","username":"","email":"liumingli15@163.com","commits":1}]},"readingTime":{"minutes":3.58,"words":1075},"filePathRelative":"posts/java-core/jdk9/modular/01-Java模块化概述.md","excerpt":"<h2>Java模块化是什么？</h2>\\n<p>Java模块化（Java Platform Module System，JPMS）是Java 9引入的一个重要特性，也被称为Project Jigsaw。它为Java平台提供了一个全新的模块系统，允许开发者将应用程序和JDK本身组织成一组相互协作的模块。</p>\\n<h3>核心概念</h3>\\n<p>**模块（Module）**是一个命名的、自描述的代码和数据集合。每个模块都有：</p>\\n<ul>\\n<li>唯一的名称</li>\\n<li>明确声明的依赖关系</li>\\n<li>精确控制的API导出</li>\\n<li>服务的提供和消费声明</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
